SMODS.Joker {
    key = 'rzempik',
    blueprint_compat = true,
    eternal_compat = true,
    perishable_compat = true,
    loc_txt = {
        name = 'rzempik',
        text = {
            'At end of round, {C:attention}eats{} adjacent {C:attention}Food Jokers{}.',
        'Gains {C:mult}X1{} Mult for each {C:attention}Food Joker{} eaten.',
        'If eats {C:attention}2 Food Jokers{}, gains {C:mult}X2.5{} Mult instead.',
        '{C:inactive}(Currently {C:mult}X#1#{C:inactive} Mult){}'
            
        }
    },
    rarity = 4,
    atlas = 'jokers',
    pos = { x = 2, y = 0 },
    cost = 25,

    config = { extra = { mult = 1 } },

    loc_vars = function(self, info_queue, card)
        return { vars = { string.format("%.1f", card.ability.extra.mult) } }
    end,

    calculate = function(self, card, context)
        if context.end_of_round and not context.blueprint then
            local my_pos = nil
            for i = 1, #G.jokers.cards do
                if G.jokers.cards[i] == card then
                    my_pos = i
                    break
                end
            end
            
            if my_pos then
                local food_jokers_eaten = 0
                local cards_to_remove = {}
                
                if my_pos > 1 and G.jokers.cards[my_pos - 1].config.center.key:find('food') then
                    table.insert(cards_to_remove, G.jokers.cards[my_pos - 1])
                    food_jokers_eaten = food_jokers_eaten + 1
                end
                
                if my_pos < #G.jokers.cards and G.jokers.cards[my_pos + 1].config.center.key:find('food') then
                    table.insert(cards_to_remove, G.jokers.cards[my_pos + 1])
                    food_jokers_eaten = food_jokers_eaten + 1
                end
                
                if food_jokers_eaten > 0 then
                    play_sound('rzempik', 1, 0.4)
                    for _, food_card in ipairs(cards_to_remove) do
                        food_card:remove()
                    end
                    
                    if food_jokers_eaten == 2 then
                        card.ability.extra.mult = card.ability.extra.mult * 2.5
                    else
                        card.ability.extra.mult = card.ability.extra.mult + food_jokers_eaten
                    end
                    
                    return {
                        card_eval_status_text(card, 'extra', nil, nil, nil, {
                            message = "Ate " .. food_jokers_eaten .. " Food Joker" .. (food_jokers_eaten > 1 and "s" or ""),
                            colour = G.C.MULT
                        })
                    }
                end
            end
        end

        if context.joker_main then
            return {
                xmult = card.ability.extra.mult
            }
        end
    end
}
SMODS.Joker {
    key = 'rzempik',
    blueprint_compat = true,
    eternal_compat = true,
    perishable_compat = true,
    loc_txt = {
        name = 'rzempik',
        text = {
            'At end of round, {C:attention}eats{} adjacent {C:attention}Food Jokers{}.',
        'Gains {C:mult}X1{} Mult for each {C:attention}Food Joker{} eaten.',
        'If eats {C:attention}2 Food Jokers{}, gains {C:mult}X2.5{} Mult instead.',
        '{C:inactive}(Currently {C:mult}X#1#{C:inactive} Mult){}'
            
        }
    },
    rarity = 4,
    atlas = 'jokers',
    pos = { x = 2, y = 0 },
    cost = 25,

    config = { extra = { xmult = 1 } },

    loc_vars = function(self, info_queue, card)
        return { vars = { card.ability.extra.xmult } }
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            local scored_card = context.other_card
            if not scored_card.debuff then
                if scored_card:is_face() then
                    card.ability.extra.mult = card.ability.extra.mult - 1
                    return {
                        card_eval_status_text(card, 'extra', nil, nil, nil, {
                            message = "-1",
                            colour = G.C.RED
                        }),
                    }
                else
                    card.ability.extra.mult = card.ability.extra.mult + 0.5
                    return {
                        card_eval_status_text(card, 'extra', nil, nil, nil, {
                            message = "+0.5",
                            colour = G.C.MULT
                        }),
                    }
                end
            end
        end

        if context.before and context.main_eval and not context.blueprint then
            for i = 1, #context.scoring_hand do
                local scored_card = context.scoring_hand[i]
                if not scored_card.debuff then
                    if scored_card:is_face() then
                        card.ability.extra.mult = card.ability.extra.mult - 1
                    else
                        card.ability.extra.mult = card.ability.extra.mult + 0.5
                    end
                end
            end
        end

        if context.joker_main then
            return {
                mult = card.ability.extra.mult
            }
        end
    end
}